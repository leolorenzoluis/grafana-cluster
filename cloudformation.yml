AWSTemplateFormatVersion: "2010-09-09"
Description:  A CloudFormation template deploying a Multi-AZ Grafana cluster using Docker containers on AWS Fargate.
              Optionally, you can specify a domain name and/or an AWS Certificate Manager ARN can be passed if you want to
              enable TLS on the ALB. If you want to create the DNS alias to the ALB, your DNS must be hosted in
              Amazon Route 53. The stack also creates CloudWatch Alarms to monitor CPU utilization in order to determine container
              counts (up and down), but other metrics may be more important in your system.

# Metadata associated with this stack.
Metadata:

  # Cloudformation interface for parameters.
  AWS::CloudFormation::Interface:
    ParameterGroups:

      # General label.
      - Label:
          default: General
        Parameters:
          - Environment

      # Grafana parameters label.
      - Label:
          default: Grafana parameters
        Parameters:
          - GrafanaAdminPassword
          - GrafanaPlugins

      # Network label.
      - Label:
          default: Network and Security parameters
        Parameters:
          - PublicSubnets
          - PrivateSubnets
          - VpcId
          - SSLCertificateArn

      # Aurora Storage parameters label.
      - Label:
          default: Aurora Storage Configuration
        Parameters:
          - DatabaseInstanceType
          - DatabaseBackupRetentionPeriod
          - EncryptionAtRest
          - DatabaseSubnets
          - DatabaseUser
          - DatabasePassword
          - DatabaseName
          - PreferredBackupWindow
          - PreferredMaintenanceWindow
          - CloudWatchDashboard

      # Session Storage parameters label.
      - Label:
          default: Session Storage Database Configuration
        Parameters:
          - SessionStorageType
          - CacheNodeType
          - ClusterSubnets
          - NumNodeGroups
          - ReplicasPerNodeGroup
          - AutomaticFailoverEnabled
          - AtRestEncryptionEnabled
          - TransitEncryptionEnabled
          - RedisCloudWatchDashboard

      # Cluster parameters label.
      - Label:
          default: Cluster Auto-scaling parameters
        Parameters:
          - DefaultContainerCpu
          - DefaultContainerMemory
          - DefaultServiceScaleEvaluationPeriods
          - DefaultServiceCpuScaleOutThreshold
          - DefaultServiceCpuScaleInThreshold
          - DefaultTaskMinContainerCount
          - DefaultTaskMaxContainerCount
          - LoadBalancerAlarmEvaluationPeriods
          - LoadBalancerAlarmEvaluationPeriodSeconds
          - LoadBalancerLatencySeconds
      
    # Labels for the above parameters.
    ParameterLabels:
      Environment:
        default: Environment name
      GrafanaAdminPassword:
        default: Grafana administator password
      GrafanaPlugins:
        default: Grafana plugins to install
      PublicSubnets:
        default: Load balancer public subnets
      PrivateSubnets:
        default: Grafana containers private subnets
      VpcId:
        default: VPC to deploy the stack in
      SSLCertificateArn:
        default: SSL certificate ARN
      DatabaseUser:
        default: Database username
      DatabasePassword:
        default: Database password
      DatabaseInstanceType:
        default: Instance type
      DatabaseName:
        default: Database name to use for the Grafana storage
      DatabaseBackupRetentionPeriod:
        default: Database backup retention period
      EncryptionAtRest:
        default: Activate encryption at rest
      DatabaseSubnets:
        default: Database subnets
      PreferredBackupWindow:
        default: Database backup window
      PreferredMaintenanceWindow:
        default: Database maintenance window
      CloudWatchDashboard:
        default: Enable Grafana Cloudwatch integration
      SessionStorageType:
        default: Session storage type
      CacheNodeType:
        default: Cache node type
      ClusterSubnets:
        default: Cluster Subnets
      NumNodeGroups:
        default: Number of nodes in the cluster
      ReplicasPerNodeGroup:
        default: Number of replicas per node group
      AutomaticFailoverEnabled:
        default: Enable automatic failover
      AtRestEncryptionEnabled:
        default: Enable at rest encryption
      TransitEncryptionEnabled:
        default: Enable transit encryption
      RedisCloudWatchDashboard:
        default: Enable CloudWatch dashboard


# Parameters exposed by this template.
Parameters:

  # The name of the environment.
  Environment:
    Type: String
    Description: The environment name on which you would like to deploy the project. This identifier will be used to tag created resources.
    Default: development
    MinLength: 1
    ConstraintDescription: The environment cannot be empty.

  # Aurora parameters.
  DatabaseInstanceType:
    Type: String
    Default: db.r4.large
    Description: The database instance class to associate with the Aurora storage cluster.
    AllowedValues:
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
      - db.r4.4xlarge
      - db.r4.8xlarge
  DatabaseBackupRetentionPeriod:
    Type: String
    Default: 7
    Description: The number of days for which automated backups are retained.
    AllowedValues:
      - 1
      - 7
      - 14
      - 21
      - 28
      - 35
  EncryptionAtRest:
    Type: String
    Default: false
    Description: Indicates whether the Aurora database storage should be encrypted.
    AllowedValues:
      - true
      - false
  DatabaseSubnets:
    Description: The subnets to place database instances in, specify at least 2 subnets for the RDS database.
    Type: List<AWS::EC2::Subnet::Id>
    MinLength: 1
  DatabaseUser:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+"
    Description: The database master account user name of the RDS database (this field cannot be equal to the `admin` identifier, as it is a reserved keyword).
    MaxLength: 16
    MinLength: 1
    ConstraintDescription: The database user name must contain only alphanumeric characters.
  DatabasePassword:
    Type: String
    NoEcho: true
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: must contain only alphanumeric characters.
    Description: The database master account password of the RDS database (choose a secure password with a length of at least 8 caracters).
    MaxLength: 41
    MinLength: 8
  DatabaseName:
    Type: String
    Default: grafana
    Description: The name of the database to create and which will contain the data generated by the Grafana nodes. Choose a name of at least 5 caracters.
    MinLength: 5
    ConstraintDescription: must contain only alphanumeric characters and be of a length of at least 5 caracters.
  PreferredBackupWindow:
    Type: String
    Default: 01:00-02:30
    Description: If automated backups are enabled (see the BackupRetentionPeriod property), the daily time range in UTC during which you want to create automated backups.
    MinLength: 5
  PreferredMaintenanceWindow:
    Type: String
    Default: mon:03:00-mon:04:00
    Description: The weekly time range (in UTC) during which system maintenance can occur.
    MinLength: 5
  CloudWatchDashboard:
    Type: String
    Description: Whether to create a Cloudwatch monitoring dashboard associated with the created Grafana cluster.
    Default: false
    AllowedValues:
      - true
      - false

  # Cache storage parameters.
  SessionStorageType:
    Type: String
    Default: redis
    Description: (Redis only) - The session storage type for Grafana (stroging Grafana sessions in a distributed Redis is highly recommended).
    AllowedValues:
      - redis
      - file
  CacheNodeType:
    Description: (Redis only) - The cache node instance class to deploy in the cluster.
    Type: String
    Default: cache.t2.micro
    AllowedValues:
      - cache.t2.micro
      - cache.t2.small
      - cache.t2.medium
      - cache.m4.large
      - cache.m4.xlarge
      - cache.m4.2xlarge
      - cache.m4.4xlarge
      - cache.m4.10xlarge
      - cache.r4.large
      - cache.r4.xlarge
      - cache.r4.2xlarge
      - cache.r4.4xlarge
      - cache.r4.8xlarge
      - cache.r4.16xlarge
  ClusterSubnets:
    Description: The subnets to place cache nodes in, specify at least 2 subnets for the caching nodes.
    Type: List<AWS::EC2::Subnet::Id>
    MinLength: 1
  AutomaticFailoverEnabled:
    Type: String
    Default: true
    Description: (Redis only) - Indicates whether Multi-AZ is enabled. When Multi-AZ is enabled, a read-only replica is automatically promoted to a read-write primary cluster if the existing primary cluster fails. If you specify true, you must specify a value greater than 1 for the ReplicasPerNodeGroup property.
    AllowedValues:
      - true
      - false
  NumNodeGroups:
    Type: Number
    Description: (Redis only) - The number of node groups (shards) for this Redis replication group.
    Default: 1
    AllowedValues:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
  ReplicasPerNodeGroup:
    Type: Number
    Description: (Redis only) - The number of replica nodes in each node group (shard).
    Default: 2
    AllowedValues:
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
      - 7
      - 8
      - 9
      - 10
  AtRestEncryptionEnabled:
    Type: String
    Default: false
    Description: (Redis only) - Indicates whether to enable encryption at rest on the ElastiCache cluster.
    AllowedValues:
      - true
      - false
  TransitEncryptionEnabled:
    Type: String
    Default: false
    Description: (Redis only) - Indicates whether to enable in-transit encryption on the ElastiCache cluster.
    AllowedValues:
      - true
      - false
  RedisCloudWatchDashboard:
    Type: String
    Description: (Redis only) - Whether to create a Cloudwatch monitoring dashboard associated with the created ElastiCache cluster.
    Default: true
    AllowedValues:
      - true
      - false

  # Network and security parameters.
  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of public subnets to associate with the internet facing load balancer, specify at least 2 public subnets.
    MinLength: 1
  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of private subnets to associate with the Grafana container deployments, specify at least 2 private subnets.
    MinLength: 1
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC identifier to deploy the Grafana application in.
    MinLength: 1
    ConstraintDescription: Must be a valid VPC identifier.
  SSLCertificateArn:
    Type: String
    Description: (Optional) - An ARN associated with a TLS certificate to use from Amazon Certificate Manager (ACM). If provided, access to the Grafana cluster will be available through the HTTPS port (443) through the internet facing load balancer, if not provided, access to the Grafana will be over HTTP (80).
    Default: ""

  # Grafana parameters.
  GrafanaAdminPassword:
    Type: String
    NoEcho: true
    Description: The Grafana admin password to configure for the user 'admin' (must have at least 6 characters and at maximum 41 characters).
    MinLength: 6
    MaxLength: 41
    ConstraintDescription: Password must have at least 6 characters and at maximum 41 characters.
  GrafanaPlugins:
    Type: String
    Description: A comma-delimited list of Grafana plugins to provision on the Grafana hosts. You can add or remove plugins from this list to match your deployment requirements.
    Default: "grafana-clock-panel,vonage-status-panel,grafana-piechart-panel,neocat-cal-heatmap-panel"

  # Auto-scaling parameters.
  DefaultContainerCpu:
    Type: Number
    Description: The amount of CPU to allocate to the containers (see https://aws.amazon.com/fargate/pricing/ for more information).
    Default: 256
    MinValue: 256
    MaxValue: 4096
    ConstraintDescription: Value must be comprised between 256 and 4096 CPUs (see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#task_size for more information).
  DefaultContainerMemory:
    Type: Number
    Description: The amount of memory to allocate to the containers (see https://aws.amazon.com/fargate/pricing/ for more information).
    Default: 512
    MinValue: 512
    MaxValue: 30720
    ConstraintDescription: Value must be comprised between 512 and 30720 megabytes (see https://aws.amazon.com/fargate/pricing/ for more information).
  DefaultServiceScaleEvaluationPeriods:
    Description: The number of periods over which data is compared to the specified threshold.
    Type: Number
    Default: 2
    MinValue: 2
  DefaultServiceCpuScaleOutThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling out.
    Default: 50
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be comprised between 0 and 100.
  DefaultServiceCpuScaleInThreshold:
    Type: Number
    Description: Average CPU value to trigger auto scaling in
    Default: 25
    MinValue: 0
    MaxValue: 100
    ConstraintDescription: Value must be comprised between 0 and 100.
  DefaultTaskMinContainerCount:
    Type: Number
    Description: The minimum number of containers to run Grafana.
    Default: 1
    MinValue: 1
    ConstraintDescription: The value must be at least 1.
  DefaultTaskMaxContainerCount:
    Type: Number
    Description: The maximum number of containers to run Grafana when auto scaling out.
    Default: 5
    MinValue: 1
    ConstraintDescription: The value must be at least 1.
  LoadBalancerAlarmEvaluationPeriods:
    Description: The number of periods over which data is compared to the specified threshold.
    Type: Number
    Default: 2
    MinValue: 2
    ConstraintDescription: The value must be at least 2.
  LoadBalancerAlarmEvaluationPeriodSeconds:
    Description: The time over which the specified statistic is applied. Specify time in seconds, in multiples of 60.
    Type: Number
    Default: 300
    MinValue: 60
    ConstraintDescription: The value must be at least 60 seconds.
  LoadBalancerLatencySeconds:
    Description: The load balancer latency threshold, expressed in seconds.
    Type: Number
    Default: 2
    MinValue: 1
    ConstraintDescription: Must be at least one second.

# Conditions declared in this template.
Conditions:
  TlsEnabled: !Not [ !Equals [ !Ref SSLCertificateArn, "" ]]
  UseRedisStorage: !Equals [ !Ref SessionStorageType, redis ]
  CreateCloudWatchDashboard: !Equals [ !Ref CloudWatchDashboard, true ]

# Description of the resources to be created.
Resources:

  # Implementation of an Aurora Cluster on
  # the AWS cloud to persist application state.
  AuroraDatabaseStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: node_modules/@aws-blocks/aurora-cluster/cloudformation.yml
      Parameters:
        Environment: !Ref Environment
        VpcId: !Ref VpcId
        SourceSecurityGroupId: !GetAtt GrafanaSecurityGroup.GroupId
        DatabaseEngineType: aurora-postgresql
        DatabaseInstanceType: !Ref DatabaseInstanceType
        DatabaseSubnets: !Join [",", !Ref DatabaseSubnets]
        DatabaseUser: !Ref DatabaseUser
        DatabasePassword: !Ref DatabasePassword
        DatabaseName: !Ref DatabaseName
        EncryptionAtRest: !Ref EncryptionAtRest
        DatabaseBackupRetentionPeriod: !Ref DatabaseBackupRetentionPeriod
        PreferredBackupWindow: !Ref PreferredBackupWindow
        PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow

  # Implementation of a Redis Cluster on
  # the AWS cloud to persist session storage.
  RedisStorageStack:
    Type: AWS::CloudFormation::Stack
    Condition: UseRedisStorage
    Properties:
      TemplateURL: node_modules/@aws-blocks/elasticache-cluster/cloudformation.yml
      Parameters:
        Environment: !Ref Environment
        VpcId: !Ref VpcId
        SourceSecurityGroupId: !GetAtt GrafanaSecurityGroup.GroupId
        ClusterSubnets: !Join [",", !Ref ClusterSubnets]
        CloudWatchDashboard: !Ref RedisCloudWatchDashboard
        CacheNodeType: !Ref CacheNodeType
        NumNodeGroups: !Ref NumNodeGroups
        ReplicasPerNodeGroup: !Ref ReplicasPerNodeGroup
        AutomaticFailoverEnabled: !Ref AutomaticFailoverEnabled
        AtRestEncryptionEnabled: !Ref AtRestEncryptionEnabled
        TransitEncryptionEnabled: !Ref TransitEncryptionEnabled

  ##################################################
  ###                                            ###
  ###              Grafana Resources             ###
  ###                                            ###
  ###   Implementation of a Grafana Cluster on   ###
  ###     the AWS cloud using ECS Fargate.       ###
  ###                                            ###
  ##################################################

  # The ALB SNS alarm topic.
  LoadBalancerAlarmTopic:
    Type: AWS::SNS::Topic

  # The Grafana security group.
  GrafanaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the containers in the Grafana service.
      VpcId: !Ref VpcId

  # Ingress rule from the load balancer security group.
  GrafanaSecurityGroupIngressLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress rule from the load balancer security group.
      GroupId: !Ref GrafanaSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # Ingress rule from other containers in the same security group.
  GrafanaSecurityGroupIngressSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress rule from other containers in the same security group.
      GroupId: !Ref GrafanaSecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref GrafanaSecurityGroup
  
  # The application load balancer security group.
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Grafana Application Load Balancer.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - !If
          - TlsEnabled
          - CidrIp: 0.0.0.0/0
            IpProtocol: TCP
            FromPort: 443
            ToPort: 443
          - CidrIp: 0.0.0.0/0
            IpProtocol: TCP
            FromPort: 80
            ToPort: 80

  # The Fargate ECS cluster definition.
  FargateEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  # The ALB lives in two public subnets. See the existing vpc.cfn.yml stack
  # for ELB/ALB and application security groups which define ingress ports.
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
        - !Ref GrafanaSecurityGroup
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment
        - Key: FargateCluster
          Value: !Ref FargateEcsCluster

  # The listener associated with the load balancer.
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: !If [TlsEnabled, 443, 80]
      Protocol: !If [TlsEnabled, HTTPS, HTTP]
      Certificates:
        - CertificateArn: !If [TlsEnabled, !Ref SSLCertificateArn, !Ref "AWS::NoValue"]
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GrafanaTargetGroup

  # The health checks can be further tuned if your requirements differ
  GrafanaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 3000
      Protocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 300
      TargetType: ip
      Tags:
        - Key: Stack
          Value: !Ref AWS::StackName
        - Key: Environment
          Value: !Ref Environment

  # The namespace of the Fargate Cluster in Amazon CloudWatch Logs.
  DefaultLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /fargate/${AWS::StackName}/${Environment}

  # THe IAM role associated with the ECS task definition.
  DefaultTaskRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole

  # The IAM task execution role associated with the ECS task definition.
  DefaultTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # The ECS task definition of the Grafana cluster.
  GrafanaTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub grafana-${AWS::StackName}
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref DefaultContainerCpu
      Memory: !Ref DefaultContainerMemory
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt DefaultTaskRole.Arn
      ExecutionRoleArn: !GetAtt DefaultTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: grafana
          Image: grafana/grafana
          Essential: true
          PortMappings:
            - ContainerPort: 3000
          Environment:
            - Name: GF_DATABASE_TYPE
              Value: postgres
            - Name: GF_DATABASE_HOST
              Value: !Sub ${AuroraDatabaseStack.Outputs.AuroraDatabaseURL}
            - Name: GF_DATABASE_USER
              Value: !Ref DatabaseUser
            - Name: GF_DATABASE_PASSWORD
              Value: !Ref DatabasePassword
            - Name: GF_DATABASE_NAME
              Value: !Ref DatabaseName
            - Name: LOAD_BALANCER_DNS
              Value: !GetAtt ApplicationLoadBalancer.DNSName
            - Name: GF_SECURITY_ADMIN_PASSWORD
              Value: !Ref GrafanaAdminPassword
            - Name: GF_INSTALL_PLUGINS
              Value: !Ref GrafanaPlugins
            - Name: GF_SESSION_PROVIDER
              Value: !Ref SessionStorageType
            - !If
              - UseRedisStorage
              - Name: GF_SESSION_PROVIDER_CONFIG
                Value: !Sub addr=${RedisStorageStack.Outputs.ClusterAddress}:${RedisStorageStack.Outputs.ClusterPort},pool_size=100,prefix=grafana
              - !Ref "AWS::NoValue"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Sub /fargate/${AWS::StackName}/${Environment}
              awslogs-stream-prefix: grafana

  # The Fargate service running Grafana.
  GrafanaService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FargateEcsCluster
      ServiceName: !Sub Grafana-${AWS::StackName}-Service
      DesiredCount: !Ref DefaultTaskMinContainerCount
      LaunchType: FARGATE
      TaskDefinition: !Ref GrafanaTaskDefinition
      LoadBalancers:
        - ContainerName: grafana
          ContainerPort: 3000
          TargetGroupArn: !Ref GrafanaTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref GrafanaSecurityGroup
          Subnets: !Ref PrivateSubnets
    DependsOn:
      - LoadBalancerListener
      - DefaultTaskExecutionRole
      - DefaultTaskRole
      - AuroraDatabaseStack

  # The IAM role associated with the application auto-scaling.
  GrafanaAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub autoscaling-policy-${AWS::StackName}
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: "*"

  # The application auto-scaling target for the Grafana cluster.
  GrafanaScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref DefaultTaskMinContainerCount
      MaxCapacity: !Ref DefaultTaskMaxContainerCount
      ResourceId: !Sub
        - service/${EcsClusterName}/${EcsDefaultServiceName}
        - EcsClusterName: !Ref FargateEcsCluster
          EcsDefaultServiceName: !GetAtt GrafanaService.Name
      RoleARN: !GetAtt GrafanaAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn:
      - GrafanaService
      - FargateEcsCluster

  # The application scale-out policy.
  GrafanaScaleOutPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ScaleOutPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref GrafanaScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: 1
            MetricIntervalLowerBound: 0

  # The application scale-in policy.
  GrafanaScaleInPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: GrafanaScaleInPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref GrafanaScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - ScalingAdjustment: -1
            MetricIntervalUpperBound: 0

  # A CloudWatch alarm associated with ECS scale-out events.
  GrafanaScaleOutAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm to add capacity if CPU is high.
      EvaluationPeriods: !Ref DefaultServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref DefaultServiceCpuScaleOutThreshold
      Period: 60
      AlarmActions:
        - !Ref GrafanaScaleOutPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref FargateEcsCluster
        - Name: ServiceName
          Value: !GetAtt GrafanaService.Name
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  # A CloudWatch alarm associated with ECS scale-in events.
  GrafanaScaleInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Alarm to reduce capacity if container CPU is low.
      EvaluationPeriods: !Ref DefaultServiceScaleEvaluationPeriods
      Statistic: Average
      TreatMissingData: notBreaching
      Threshold: !Ref DefaultServiceCpuScaleInThreshold
      Period: 300
      AlarmActions:
        - !Ref GrafanaScaleInPolicy
      Namespace: AWS/ECS
      Dimensions:
        - Name: ClusterName
          Value: !Ref FargateEcsCluster
        - Name: ServiceName
          Value: !GetAtt GrafanaService.Name
      ComparisonOperator: LessThanThreshold
      MetricName: CPUUtilization

  # An alarm triggered on high latency periods on the load-balancer.
  LoadBalancerLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: !Sub LB latency is over ${LoadBalancerLatencySeconds} second(s) for ${LoadBalancerAlarmEvaluationPeriods} period(s) of ${LoadBalancerAlarmEvaluationPeriodSeconds} seconds.
      TreatMissingData: notBreaching
      AlarmActions:
      - !Ref LoadBalancerAlarmTopic
      Namespace: AWS/ApplicationELB
      MetricName: TargetResponseTime
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Unit: Seconds
      Statistic: Average
      EvaluationPeriods: !Ref LoadBalancerAlarmEvaluationPeriods
      Period: !Ref LoadBalancerAlarmEvaluationPeriodSeconds
      Threshold: !Ref LoadBalancerLatencySeconds
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt ApplicationLoadBalancer.LoadBalancerFullName

  #######################################################
  ###                                                 ###
  ###              Cloudwatch Resources               ###
  ###                                                 ###
  ###    The resources declared below are part of     ###
  ###  Cloudwatch monitoring system for the cluster.  ###
  ###                                                 ###
  #######################################################

  # Grafana cluster Cloudwatch dashboard.
  CloudwatchMonitoringDashboard:
    Condition: CreateCloudWatchDashboard
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub grafana-monitoring-${AWS::StackName}
      DashboardBody:
        {"Fn::Join":
          [ "",
            [
              '{"widgets": [
                  {
                    "type": "metric",
                    "x": 0,
                    "y": 0,
                    "width": 12,
                    "height": 6,
                    "properties": {
                        "stat": "Average",
                        "metrics": [
                            [ "AWS/ECS", "CPUUtilization", "ServiceName", "', !Sub "${GrafanaService.Name}",'", "ClusterName", "', !Ref FargateEcsCluster,'" ],
                            [ "AWS/ECS", "MemoryUtilization", "ServiceName", "', !Sub "${GrafanaService.Name}",'", "ClusterName", "', !Ref FargateEcsCluster,'" ],
                            [ "AWS/ECS", "CPUReservation", "ServiceName", "', !Sub "${GrafanaService.Name}",'", "ClusterName", "', !Ref FargateEcsCluster,'" ],
                            [ "AWS/ECS", "MemoryReservation", "ServiceName", "', !Sub "${GrafanaService.Name}",'", "ClusterName", "', !Ref FargateEcsCluster,'" ]
                        ],
                        "period": 300,
                        "region": "',!Ref 'AWS::Region','",
                        "view": "timeSeries",
                        "stacked": true,
                        "title": "ECS Service CPU/Memory"
                    }
                  }
                ]
              }'
            ]
          ]
        }

# The outputs to be generated by this template.
Outputs:
  Name:
    Description: Grafana Stack Name
    Description: Grafana Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-Name
  FargateEcsClusterName:
    Description: Fargate ECS cluster name
    Value: !Ref FargateEcsCluster
    Export:
      Name: !Sub ${AWS::StackName}-FargateEcsClusterName
  FargateEcsClusterArn:
    Description: Fargate ECS cluster ARN
    Value: !GetAtt FargateEcsCluster.Arn
    Export:
      Name: !Sub ${AWS::StackName}-FargateEcsClusterArn
  GrafanaServiceArn:
    Description: Grafana service ARN
    Value: GrafanaService
    Export:
      Name: !Sub ${AWS::StackName}-GrafanaServiceArn
  GrafanaServiceName:
    Description: Grafana service name
    Value: !GetAtt GrafanaService.Name
    Export:
      Name: !Sub ${AWS::StackName}-GrafanaServiceName
  GrafanaServiceUrl:
    Description: Grafana application URL
    Value: !Join
      - ""
      -
        - !If [TlsEnabled, https, http]
        - ://
        - !GetAtt ApplicationLoadBalancer.DNSName
  ApplicationLoadBalancerArn:
    Description: Load balancer ARN
    Value: !Ref ApplicationLoadBalancer
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerArn
  ApplicationLoadBalancerDnsName:
    Description: Load balancer DNS name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerDnsName
  ApplicationLoadBalancerName:
    Description: Load balancer name
    Value: !GetAtt ApplicationLoadBalancer.LoadBalancerName
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerName
  ApplicationLoadBalancerListenerArn:
    Description: Load balancer listener ARN
    Value: !Ref LoadBalancerListener
    Export:
      Name: !Sub ${AWS::StackName}-ApplicationLoadBalancerListenerArn
  LoadBalancerAlarmTopicArn:
    Description: Load balancer alarm topic ARN
    Value: !Ref LoadBalancerAlarmTopic
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerAlarmTopicArn
  LoadBalancerAlarmTopicName:
    Description: Load balancer alarm topic name
    Value: !GetAtt LoadBalancerAlarmTopic.TopicName
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerAlarmTopicName